import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, ConversationHandler
)

# =============================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# =============================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# =============================
# –í–û–ü–†–û–°–´ –¢–ï–°–¢–ê (–ø–æ –ë–∞—É–º–∞–Ω–Ω)
# =============================
# =============================
# –í–û–ü–†–û–°–´ (—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ A/B)
# =============================

QUESTIONS = [
    # 1Ô∏è‚É£ OILY vs DRY
    ("O/D", "1Ô∏è‚É£ –ö–∞–∫ —á–∞—Å—Ç–æ –≤–∞—à–∞ –∫–æ–∂–∞ –±–ª–µ—Å—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è?", {
        "A": "–ë–ª–µ—Å—Ç–∏—Ç —É–∂–µ –∫ –æ–±–µ–¥—É, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –¢-–∑–æ–Ω–µ",
        "B": "–ü–æ—á—Ç–∏ –Ω–µ –±–ª–µ—Å—Ç–∏—Ç, –¥–∞–∂–µ –∫ –≤–µ—á–µ—Ä—É"
    }),
    ("O/D", "2Ô∏è‚É£ –ö–∞–∫ –≤—ã–≥–ª—è–¥—è—Ç –≤–∞—à–∏ –ø–æ—Ä—ã?", {
        "A": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ –Ω–æ—Å—É –∏ –ª–±—É",
        "B": "–ú–µ–ª–∫–∏–µ –∏–ª–∏ –ø–æ—á—Ç–∏ –Ω–µ–∑–∞–º–µ—Ç–Ω—ã–µ"
    }),
    ("O/D", "3Ô∏è‚É£ –ö–∞–∫ –∫–æ–∂–∞ –æ—â—É—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É–º—ã–≤–∞–Ω–∏—è?", {
        "A": "–ß–µ—Ä–µ–∑ —á–∞—Å ‚Äî –∫–∞–∫ –æ–±—ã—á–Ω–æ, –±–µ–∑ —Å—Ç—è–Ω—É—Ç–æ—Å—Ç–∏",
        "B": "–ß—É–≤—Å—Ç–≤—É–µ—Ç—Å—è —Å—É—Ö–æ—Å—Ç—å –∏–ª–∏ —Å—Ç—è–Ω—É—Ç–æ—Å—Ç—å"
    }),
    ("O/D", "4Ô∏è‚É£ –ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä—ã—â–∏ –∏–ª–∏ —á—ë—Ä–Ω—ã–µ —Ç–æ—á–∫–∏?", {
        "A": "–†–µ–≥—É–ª—è—Ä–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –¢-–∑–æ–Ω–µ",
        "B": "–†–µ–¥–∫–æ –∏–ª–∏ –ø–æ—á—Ç–∏ –Ω–∏–∫–æ–≥–¥–∞"
    }),

    # 2Ô∏è‚É£ SENSITIVE vs RESISTANT
    ("S/R", "5Ô∏è‚É£ –†–µ–∞–≥–∏—Ä—É–µ—Ç –ª–∏ –∫–æ–∂–∞ –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ–º, –∑—É–¥–æ–º –∏–ª–∏ –∂–∂–µ–Ω–∏–µ–º –Ω–∞ –∫–æ—Å–º–µ—Ç–∏–∫—É?", {
        "A": "–î–∞, —á–∞—Å—Ç–æ",
        "B": "–ü–æ—á—Ç–∏ –Ω–∏–∫–æ–≥–¥–∞"
    }),
    ("S/R", "6Ô∏è‚É£ –ö—Ä–∞—Å–Ω–µ–µ—Ç –ª–∏ –∫–æ–∂–∞ –æ—Ç –≤–µ—Ç—Ä–∞, —Ö–æ–ª–æ–¥–∞ –∏–ª–∏ –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã?", {
        "A": "–î–∞, –ª–µ–≥–∫–æ –∫—Ä–∞—Å–Ω–µ–µ—Ç",
        "B": "–ù–µ—Ç, –æ—Å—Ç–∞—ë—Ç—Å—è —Å–ø–æ–∫–æ–π–Ω–æ–π"
    }),
    ("S/R", "7Ô∏è‚É£ –ú–æ–∂–µ—Ç–µ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∏—Å–ª–æ—Ç—ã (AHA/BHA) –∏–ª–∏ —Ä–µ—Ç–∏–Ω–æ–ª –±–µ–∑ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è?", {
        "A": "–ù–µ—Ç, –≤—ã–∑—ã–≤–∞—é—Ç –∂–∂–µ–Ω–∏–µ –∏–ª–∏ —à–µ–ª—É—à–µ–Ω–∏–µ",
        "B": "–î–∞, –±–µ–∑ –ø—Ä–æ–±–ª–µ–º"
    }),
    ("S/R", "8Ô∏è‚É£ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ä–æ–∑–∞—Ü–µ–∞, –∫—É–ø–µ—Ä–æ–∑ –∏–ª–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ?", {
        "A": "–î–∞",
        "B": "–ù–µ—Ç"
    }),

    # 3Ô∏è‚É£ PIGMENTED vs NON-PIGMENTED
    ("P/N", "9Ô∏è‚É£ –û—Å—Ç–∞—é—Ç—Å—è –ª–∏ —Ç—ë–º–Ω—ã–µ –ø—è—Ç–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä—ã—â–µ–π?", {
        "A": "–î–∞, –Ω–∞–¥–æ–ª–≥–æ",
        "B": "–ù–µ—Ç, –∫–æ–∂–∞ –±—ã—Å—Ç—Ä–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è"
    }),
    ("P/N", "üîü –ï—Å—Ç—å –ª–∏ –≤–µ—Å–Ω—É—à–∫–∏ –∏–ª–∏ –ø–∏–≥–º–µ–Ω—Ç–Ω—ã–µ –ø—è—Ç–Ω–∞?", {
        "A": "–î–∞",
        "B": "–ù–µ—Ç"
    }),
    ("P/N", "1Ô∏è‚É£1Ô∏è‚É£ –¢–µ–º–Ω–µ–µ—Ç –ª–∏ –∫–æ–∂–∞ –ø–æ—Å–ª–µ –≤–æ—Å–ø–∞–ª–µ–Ω–∏–π –∏–ª–∏ —Ü–∞—Ä–∞–ø–∏–Ω?", {
        "A": "–î–∞",
        "B": "–ù–µ—Ç"
    }),
    ("P/N", "1Ô∏è‚É£2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –≤—ã –æ—Å–≤–µ—Ç–ª—è—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞?", {
        "A": "–î–∞, —Ä–µ–≥—É–ª—è—Ä–Ω–æ",
        "B": "–ù–µ—Ç, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é"
    }),

    # 4Ô∏è‚É£ WRINKLE-PRONE vs TIGHT
    ("W/T", "1Ô∏è‚É£3Ô∏è‚É£ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –º–æ—Ä—â–∏–Ω—ã –≤ –ø–æ–∫–æ–µ (–Ω–µ –ø—Ä–∏ –º–∏–º–∏–∫–µ)?", {
        "A": "–î–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –≤–æ–∫—Ä—É–≥ –≥–ª–∞–∑ –∏–ª–∏ –Ω–∞ –ª–±—É",
        "B": "–ù–µ—Ç –∏–ª–∏ –ø–æ—á—Ç–∏ –Ω–µ–∑–∞–º–µ—Ç–Ω—ã"
    }),
    ("W/T", "1Ô∏è‚É£4Ô∏è‚É£ –ö–æ–∂–∞ –∫–∞–∂–µ—Ç—Å—è —Ç–æ–Ω–∫–æ–π/–¥—Ä—è–±–ª–æ–π –∏–ª–∏ –ø–ª–æ—Ç–Ω–æ–π/—É–ø—Ä—É–≥–æ–π?", {
        "A": "–¢–æ–Ω–∫–∞—è, –¥—Ä—è–±–ª–∞—è",
        "B": "–ü–ª–æ—Ç–Ω–∞—è, —ç–ª–∞—Å—Ç–∏—á–Ω–∞—è"
    }),
    ("W/T", "1Ô∏è‚É£5Ô∏è‚É£ –ë—ã—Å—Ç—Ä–æ –ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ–∂–∞ –≤ —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ —â–∏–ø–∫–∞?", {
        "A": "–ú–µ–¥–ª–µ–Ω–Ω–æ",
        "B": "–°—Ä–∞–∑—É"
    }),
    ("W/T", "1Ô∏è‚É£6Ô∏è‚É£ –í—ã –≤—ã–≥–ª—è–¥–∏—Ç–µ —Å—Ç–∞—Ä—à–µ —Å–≤–æ–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞?", {
        "A": "–î–∞, —Å—Ç–∞—Ä—à–µ",
        "B": "–ù–µ—Ç, –º–æ–ª–æ–∂–µ –∏–ª–∏ —Ä–æ–≤–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"
    })
]

Q_STATE = range(1)


# =============================
# –°–¢–ê–†–¢
# =============================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–∂–∏ –ø–æ —Å–∏—Å—Ç–µ–º–µ –ë–∞—É–º–∞–Ω–Ω.\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, –Ω–∞–ø–∏—à–∏ /test"
    )

# =============================
# –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ê
# =============================
async def test_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["answers"] = []
    context.user_data["index"] = 0
    await ask_question(update, context)
    return Q_STATE

# =============================
# –í–û–ü–†–û–° –° –í–ê–†–ò–ê–ù–¢–ê–ú–ò
# =============================
async def ask_question(update_or_query, context):
    idx = context.user_data["index"]
    category, question, options = QUESTIONS[idx]

    buttons = [
        [InlineKeyboardButton(text=f"A: {options['A']}", callback_data="A")],
        [InlineKeyboardButton(text=f"B: {options['B']}", callback_data="B")]
    ]
    markup = InlineKeyboardMarkup(buttons)

    text = f"{question}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"
    if hasattr(update_or_query, "message"):
        await update_or_query.message.reply_text(text, reply_markup=markup)
    else:
        await update_or_query.edit_message_text(text, reply_markup=markup)

# =============================
# –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê
# =============================
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    ans = query.data
    idx = context.user_data["index"]
    category, question, options = QUESTIONS[idx]
    context.user_data["answers"].append((category, ans))
    context.user_data["index"] += 1

    if context.user_data["index"] >= len(QUESTIONS):
        result = classify_baumann(context.user_data["answers"])
        await query.edit_message_text(
            f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n–í–∞—à —Ç–∏–ø –∫–æ–∂–∏: *{result['code']}*\n\n{result['desc']}",
            parse_mode="Markdown"
        )
        return ConversationHandler.END
    else:
        await ask_question(query, context)
        return Q_STATE

# =============================
# –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø
# =============================
def classify_baumann(answers):
    summary = {"O/D": [], "S/R": [], "P/N": [], "W/T": []}
    for cat, ans in answers:
        summary[cat].append(ans)

    result = {}
    code = ""

    # 1. –ñ–∏—Ä–Ω–æ—Å—Ç—å
    od = summary["O/D"]
    result["O/D"] = "O" if od.count("A") > od.count("B") else ("D" if od.count("B") > od.count("A") else od[-1].replace("A", "O").replace("B", "D"))

    # 2. –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    sr = summary["S/R"]
    result["S/R"] = "S" if sr.count("A") > sr.count("B") else ("R" if sr.count("B") > sr.count("A") else sr[-1].replace("A", "S").replace("B", "R"))

    # 3. –ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è
    pn = summary["P/N"]
    result["P/N"] = "P" if pn.count("A") > pn.count("B") else ("N" if pn.count("B") > pn.count("A") else pn[-1].replace("A", "P").replace("B", "N"))

    # 4. –°—Ç–∞—Ä–µ–Ω–∏–µ
    wt = summary["W/T"]
    result["W/T"] = "W" if wt.count("A") > wt.count("B") else ("T" if wt.count("B") > wt.count("A") else wt[-1].replace("A", "W").replace("B", "T"))

    code = result["O/D"] + result["S/R"] + result["P/N"] + result["W/T"]
    desc = explain_skin_type(code)
    return {"code": code, "desc": desc}

# =============================
# –¢–ï–ö–°–¢–û–í–û–ï –û–ë–™–Ø–°–ù–ï–ù–ò–ï
# =============================
def explain_skin_type(code: str) -> str:
    explanations = {
        "O": "–ñ–∏—Ä–Ω–∞—è", "D": "–°—É—Ö–∞—è",
        "S": "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è", "R": "–£—Å—Ç–æ–π—á–∏–≤–∞—è",
        "P": "–ü–∏–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", "N": "–ë–µ–∑ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏ –∫ –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏–∏",
        "W": "–°–∫–ª–æ–Ω–Ω–∞ –∫ –º–æ—Ä—â–∏–Ω–∞–º", "T": "–ü–ª–æ—Ç–Ω–∞—è/—É–ø—Ä—É–≥–∞—è"
    }
    parts = [explanations.get(c, "") for c in code]
    return f"–¢–∏–ø –∫–æ–∂–∏: {', '.join(parts)}."

# =============================
# MAIN
# =============================
def main():
    application = ApplicationBuilder().token("8240689092:AAHsXDuEKVN74l2Z4yu_8khC6HqhV8gcOMo").build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("test", test_start)],
        states={Q_STATE: [CallbackQueryHandler(handle_answer, pattern="^(A|B)$")],
        },
        fallbacks=[],
        per_message=False,   # –≤–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–∂–¥—É callback
    )


    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    application.run_polling()

if __name__ == "__main__":
    main()