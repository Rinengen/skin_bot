import csv
import asyncio
import os
import json

CSV_FILE = "patients.csv"

# --- –ï–¥–∏–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–µ–π ---
HEADERS = [
    "id_patient",
    "age",
    "sex",
    "allergies",
    "answers_json",
    "skin_code",
    "skin_type_dermatoscopy",
    "match_percent",
    "final_skin_type",
    "time_of_year"
]

LOCK = asyncio.Lock()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV ---
if not os.path.exists(CSV_FILE):
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=HEADERS)
        writer.writeheader()

# ===============================================================
#                        –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø
# ===============================================================

async def save_initial_data(id_patient: str, age: int, sex: str, allergies: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –¥–∏–∞–ª–æ–≥–∞."""
    async with LOCK:
        with open(CSV_FILE, "a", newline="", encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=HEADERS)
            writer.writerow({
                "id_patient": id_patient,
                "age": age,
                "sex": sex,
                "allergies": allergies,
                "answers_json": "",
                "skin_code": "",
                "skin_type_dermatoscopy": "",
                "match_percent": "",
                "final_skin_type": "",
                "time_of_year": ""
            })


async def save_test_results(id_patient: str, answers_json: str, skin_code: str, time_of_year: str = ""):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞."""
    async with LOCK:
        rows = []
        with open(CSV_FILE, "r", newline="", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            rows = list(reader)

        updated = False
        for row in rows:
            if row.get("id_patient") == id_patient:
                row["answers_json"] = answers_json
                row["skin_code"] = skin_code
                if time_of_year:
                    row["time_of_year"] = time_of_year
                updated = True
                break

        if not updated:
            rows.append({
                "id_patient": id_patient,
                "age": "",
                "sex": "",
                "allergies": "",
                "answers_json": answers_json,
                "skin_code": skin_code,
                "skin_type_dermatoscopy": "",
                "match_percent": "",
                "final_skin_type": "",
                "time_of_year": time_of_year
            })

        with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=HEADERS)
            writer.writeheader()
            writer.writerows(rows)


async def save_dermatoscopy_result(id_patient, skin_code, skin_type_dermatoscopy):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Ñ–æ—Ç–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è."""
    async with LOCK:
        rows = []
        with open(CSV_FILE, "r", encoding="utf-8", newline="") as f:
            reader = csv.DictReader(f)
            rows = list(reader)

        found = False
        comparison = {"match_percent": 0, "final_skin_type": skin_type_dermatoscopy}
        for row in rows:
            if row["id_patient"] == id_patient:
                row["skin_type_dermatoscopy"] = skin_type_dermatoscopy
                comparison = compare_skin_types(skin_code, skin_type_dermatoscopy)
                row["match_percent"] = comparison["match_percent"]
                row["final_skin_type"] = comparison["final_skin_type"]
                found = True
                break

        if not found:
            comparison = compare_skin_types("", skin_type_dermatoscopy)
            rows.append({
                "id_patient": id_patient,
                "age": "",
                "sex": "",
                "allergies": "",
                "answers_json": "",
                "skin_code": "",
                "skin_type_dermatoscopy": skin_type_dermatoscopy,
                "match_percent": comparison["match_percent"],
                "final_skin_type": comparison["final_skin_type"],
                "time_of_year": ""
            })

        with open(CSV_FILE, "w", encoding="utf-8", newline="") as f:
            writer = csv.DictWriter(f, fieldnames=HEADERS)
            writer.writeheader()
            writer.writerows(rows)

        return comparison  # üî• –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É


# ===============================================================
#                  –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ò–ü –ö–û–ñ–ò
# ===============================================================
def compare_skin_types(skin_code: str, skin_type_dermatoscopy: str) -> dict:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–∏–ø –∫–æ–∂–∏ –ø–æ —Ç–µ—Å—Ç—É –∏ –ø–æ –¥–µ—Ä–º–∞—Ç–æ—Å–∫–æ–ø–∏–∏ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø –∫–æ–∂–∏.
    
    –õ–æ–≥–∏–∫–∞:
    - –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ 4 —Å–∏–º–≤–æ–ª–æ–≤:
        - –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
        - –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –¥–µ—Ä–º–∞—Ç–æ—Å–∫–æ–ø–∏–∏
    - match_percent = (—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è / 4) * 100
    """
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    s1 = (skin_code or "").strip().upper()[:4]
    s2 = (skin_type_dermatoscopy or "").strip().upper()[:4]

    # –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∫–æ–¥–æ–≤ –ø—É—Å—Ç–æ–π, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø = –Ω–µ–ø—É—Å—Ç–æ–π, —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ = 0%
    if not s1:
        return {"match_percent": 0, "final_skin_type": s2}
    if not s2:
        return {"match_percent": 0, "final_skin_type": s1}

    matches = 0
    final_type = []

    for i, (c_test, c_derm) in enumerate(zip(s1, s2)):
        if c_test == c_derm:
            matches += 1
            final_type.append(c_test)
        else:
            final_type.append(c_derm)

    match_percent = round((matches / 4) * 100, 2)
    final_skin_type = "".join(final_type)

    # –î–ª—è –¥–µ–±–∞–≥–∞: –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"[DEBUG] test: {s1}, derm: {s2}, matches: {matches}, final: {final_skin_type}, %: {match_percent}")

    return {"match_percent": match_percent, "final_skin_type": final_skin_type}



# ===============================================================
#                –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í JSON –î–õ–Ø LLM/RAG
# ===============================================================

def get_patient_json(id_patient: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è LLM/RAG."""
    final_fields = ["age", "sex", "allergies", "final_skin_type", "time_of_year"]
    with open(CSV_FILE, "r", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row["id_patient"] == id_patient:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                filtered = {k: row[k] for k in final_fields}
                return json.dumps(filtered, ensure_ascii=False, indent=2)
    return "{}"

