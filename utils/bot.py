# bot.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)
from utils.test import SkinTest
from utils.dataset_csv import save_initial_data, save_test_results
import asyncio
import os
import json
from utils.dataset_csv import save_initial_data, save_test_results, LOCK

import uuid
from datetime import datetime
from utils.dataset_csv import save_dermatoscopy_result


REPORTS_DIR = "reports"

CONSENT, DEMO, Q_STATE = range(3)

class SkinBot:
    def __init__(self, token):
        self.token = token
        self.test = SkinTest()
        self.questions = self.test.questions
        os.makedirs(REPORTS_DIR, exist_ok=True)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–∂–∏.\n"
            "–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, –Ω–∞–ø–∏—à–∏ /test"
        )

    async def consent_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        buttons = [
            [InlineKeyboardButton("–î–∞", callback_data="yes")],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data="no")]
        ]
        markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text(
            "–ú—ã —Å–æ–±–∏—Ä–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –°–æ–≥–ª–∞—Å–Ω—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?", reply_markup=markup
        )
        return CONSENT

    async def handle_consent(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        choice = query.data.lower()

        if choice in ["–¥–∞", "yes"]:
            buttons = [
                [InlineKeyboardButton("–ú", callback_data="–ú")],
                [InlineKeyboardButton("–ñ", callback_data="–ñ")]
            ]
            markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=markup)
            return DEMO
        else:
            await query.edit_message_text("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
            return ConversationHandler.END

    async def handle_demo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –í—ã–±–æ—Ä –ø–æ–ª–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
        if "sex" not in context.user_data:
            query = update.callback_query
            await query.answer()
            sex = query.data.upper()
            if sex not in ["–ú", "–ñ"]:
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ú –∏–ª–∏ –ñ")
                return DEMO
            context.user_data["sex"] = sex
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
            return DEMO

        # –í–æ–∑—Ä–∞—Å—Ç –∏ –∞–ª–ª–µ—Ä–≥–∏–∏ –≤–≤–æ–¥—è—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        elif "age" not in context.user_data:
            try:
                age = int(update.message.text)
                context.user_data["age"] = age
                await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–∏–∏ (—Ç–µ–∫—Å—Ç):")
                return DEMO
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                return DEMO

        else:
            context.user_data["allergies"] = update.message.text
        # –î–∞–ª–µ–µ –∏–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è id, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ—Å—Ç—É –∫–∞–∫ —Ä–∞–Ω
            # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
            id_patient = str(uuid.uuid4())
            context.user_data["id_patient"] = id_patient
            context.user_data["answers_json"] = {}
            context.user_data["index"] = 0

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await save_initial_data(
                id_patient=context.user_data["id_patient"],
                age=context.user_data["age"],
                sex=context.user_data["sex"],
                allergies=context.user_data["allergies"]
            )

            await self.ask_question(update, context)
            return Q_STATE

    async def ask_question(self, update_or_query, context):
        idx = context.user_data["index"]
        category, question, options = self.questions[idx]

        buttons = [
            [InlineKeyboardButton(f"A: {options['A']}", callback_data="A")],
            [InlineKeyboardButton(f"B: {options['B']}", callback_data="B")]
        ]
        markup = InlineKeyboardMarkup(buttons)
        text = f"{question}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"

        if hasattr(update_or_query, "message"):
            await update_or_query.message.reply_text(text, reply_markup=markup)
        else:
            await update_or_query.edit_message_text(text, reply_markup=markup)

    async def handle_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        ans = query.data

        idx = context.user_data["index"]
        category, _, _ = self.questions[idx]
        context.user_data["answers_json"][category] = ans
        context.user_data["index"] += 1

        if context.user_data["index"] >= len(self.questions):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç–æ–≤ –≤ JSON-—Å—Ç—Ä–æ–∫—É
            answers_json_str = json.dumps(context.user_data["answers_json"], ensure_ascii=False)

            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É
            answers_list = list(context.user_data["answers_json"].items())
            result = self.test.classify_baumann(answers_list)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV
            await save_test_results(
                id_patient=context.user_data["id_patient"],
                answers_json=answers_json_str,
                skin_code=result["code"]
            )

            await query.edit_message_text(
                f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n–í–∞—à —Ç–∏–ø –∫–æ–∂–∏: *{result['code']}*\n\n{result['desc']}",
                parse_mode="Markdown"
            )
            return ConversationHandler.END
        else:
            await self.ask_question(query, context)
            return Q_STATE
        

    async def request_dermatoscopy(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /photo ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç"""
            user_id = update.effective_user.id
            id_patient = context.user_data.get("id_patient")

            if not id_patient:
                await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π /test.")
                return

            await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ä–º–∞—Ç–æ—Å–∫–æ–ø–∞...")

            # --- –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ ---
            skin_type = "Normal / Dry"

            # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ CSV ---
            await save_dermatoscopy_result(id_patient, skin_type)

            # --- –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –≤ DOCX ---
            filename = os.path.join(REPORTS_DIR, f"regina.docx")
            doc = Document()
            doc.add_heading("–û—Ç—á—ë—Ç –¥–µ—Ä–º–∞—Ç–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞", level=1)
            doc.add_paragraph(f"–ü–∞—Ü–∏–µ–Ω—Ç ID: {id_patient}")
            doc.add_paragraph(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
            doc.add_paragraph(f"–¢–∏–ø –∫–æ–∂–∏ –ø–æ –¥–µ—Ä–º–∞—Ç–æ—Å–∫–æ–ø–∏–∏: {skin_type}")
            doc.add_paragraph("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —É—Ö–æ–¥, –±–µ–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–∞—Ç–æ–ª–æ–≥–∏–∏.")
            doc.save(filename)

            # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
            await update.message.reply_document(
                document=open(filename, "rb"),
                caption="üßæ –í–∞—à –æ—Ç—á—ë—Ç –ø–æ –¥–µ—Ä–º–∞—Ç–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É"
            )

    def run(self):
        from telegram.ext import ApplicationBuilder
        app = ApplicationBuilder().token(self.token).build()

        conv = ConversationHandler(
            entry_points=[CommandHandler("test", self.consent_start)],
            states={
                CONSENT: [CallbackQueryHandler(self.handle_consent, pattern="^(yes|no)$")],
                DEMO: [
                    CallbackQueryHandler(self.handle_demo, pattern="^(–ú|–ñ)$"),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_demo)  # –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –∞–ª–ª–µ—Ä–≥–∏–π
                ],
                Q_STATE: [CallbackQueryHandler(self.handle_answer, pattern="^(A|B)$")]
            },
            fallbacks=[],
            per_message=False
        )

        app.add_handler(CommandHandler("start", self.start))
        app.add_handler(CommandHandler("photo", self.request_dermatoscopy)) 
        app.add_handler(conv)

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
        app.run_polling()
