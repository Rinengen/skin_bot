from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)
from utils.test import SkinTest
from utils.dataset_csv import (
    save_initial_data,
    save_test_results,
    save_dermatoscopy_result,
    get_patient_json
)
import asyncio
import os
import json
import uuid
from datetime import datetime

REPORTS_DIR = "reports"
CONSENT, DEMO, Q_STATE, TIME_OF_YEAR = range(4)


class SkinBot:
    def __init__(self, token):
        self.token = token
        self.test = SkinTest()
        self.questions = self.test.questions
        os.makedirs(REPORTS_DIR, exist_ok=True)

    # =============================================================
    # –≠–¢–ê–ü 0: –°–¢–ê–†–¢
    # =============================================================

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        buttons = [
            [InlineKeyboardButton("üß™ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test")]
        ]
        markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
            "–≠—Ç–æ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —É—Ö–æ–¥–æ–≤–æ–π –∫–æ—Å–º–µ—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø—É –∫–æ–∂–∏.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
            reply_markup=markup
        )

    async def handle_start_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        return await self.consent_start(update, context)

    # =============================================================
    # –≠–¢–ê–ü 1: –°–û–ì–õ–ê–°–ò–ï –ò –ê–ù–ö–ï–¢–ê
    # =============================================================

    async def consent_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        buttons = [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data="yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="no")]
        ]
        markup = InlineKeyboardMarkup(buttons)
        msg = (
            "üß© –ú—ã —Å–æ–±–∏—Ä–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n"
            "–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ?"
        )
        if hasattr(update, "callback_query"):
            await update.callback_query.edit_message_text(msg, reply_markup=markup)
        else:
            await update.message.reply_text(msg, reply_markup=markup)
        return CONSENT

    async def handle_consent(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        if query.data == "no":
            await query.edit_message_text(
                "‚ùå –°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, —Ç–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω –≤ —Å–≤—è–∑–∏ —Å –∂–µ–ª–∞–Ω–∏–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞. –î–æ –≤—Å—Ç—Ä–µ—á–∏!\n"
                "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /start \n"
            )
            return ConversationHandler.END

        buttons = [
            [InlineKeyboardButton("–ú—É–∂—Å–æ–π", callback_data="–ú")],
            [InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="–ñ")]
        ]
        await query.edit_message_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=InlineKeyboardMarkup(buttons))
        return DEMO

    async def handle_demo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # --- –í—ã–±–æ—Ä –ø–æ–ª–∞ ---
        if "sex" not in context.user_data:
            query = update.callback_query
            await query.answer()
            context.user_data["sex"] = query.data
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 120):")
            return DEMO

        # --- –í–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞ ---
        elif "age" not in context.user_data:
            try:
                age = int(update.message.text)
            except ValueError:
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
                return DEMO

            if not (0 <= age <= 120):
                await update.message.reply_text("‚ö†Ô∏è –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0‚Äì120. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return DEMO

            context.user_data["age"] = age
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–∏–∏ (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
            return DEMO

        # --- –í–≤–æ–¥ –∞–ª–ª–µ—Ä–≥–∏–π ---
        else:
            context.user_data["allergies"] = update.message.text.strip() or "–Ω–µ—Ç"
            context.user_data["id_patient"] = str(uuid.uuid4())
            context.user_data["answers_json"] = {}
            context.user_data["index"] = 0

            # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ CSV ---
            await save_initial_data(
                id_patient=context.user_data["id_patient"],
                age=context.user_data["age"],
                sex=context.user_data["sex"],
                allergies=context.user_data["allergies"]
            )

            # --- –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É —Ç–µ—Å—Ç–∞ ---
            await update.message.reply_text(
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º—É —Ç–µ—Å—Ç—É –õ–µ—Å–ª–∏ –ë–∞—É–º–Ω–∞ (–º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)."
            )
            await self.ask_question(update, context)
            return Q_STATE

    # =============================================================
    # –≠–¢–ê–ü 2: –¢–ï–°–¢ –ë–ê–£–ú–ê–ù
    # =============================================================

    async def ask_question(self, update_or_query, context):
        idx = context.user_data["index"]
        category, question, options = self.questions[idx]

        buttons = [
            [InlineKeyboardButton(f"A: {options['A']}", callback_data="A")],
            [InlineKeyboardButton(f"B: {options['B']}", callback_data="B")]
        ]
        markup = InlineKeyboardMarkup(buttons)
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
        note_text = options.get("note", "")
        text = f"{question}\n\n{note_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"

        if hasattr(update_or_query, "message"):
            await update_or_query.message.reply_text(text, reply_markup=markup)
        else:
            await update_or_query.edit_message_text(text, reply_markup=markup)

    async def handle_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        ans = query.data

        idx = context.user_data["index"]
        category, _, _ = self.questions[idx]
        context.user_data["answers_json"][category] = ans
        context.user_data["index"] += 1

        # –µ—Å–ª–∏ —Ç–µ—Å—Ç –∑–∞–∫–æ–Ω—á–µ–Ω
        if context.user_data["index"] >= len(self.questions):
            answers_list = list(context.user_data["answers_json"].items())
            result = self.test.classify_baumann(answers_list)
            context.user_data["skin_code"] = result["code"]

            # --- –£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞ ---
            buttons = [
                [InlineKeyboardButton("–û—Å–µ–Ω—å/–ó–∏–º–∞", callback_data="–û—Å–µ–Ω—å/–ó–∏–º–∞")],
                [InlineKeyboardButton("–í–µ—Å–Ω–∞/–õ–µ—Ç–æ", callback_data="–í–µ—Å–Ω–∞/–õ–µ—Ç–æ")]
            ]
            await query.edit_message_text(
                f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n–¢–∏–ø –∫–æ–∂–∏: *{result['code']}*\n{result['desc']}\n\n"
                "üìå –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Ö–æ–¥–æ–≤—É—é –∫–æ—Å–º–µ—Ç–∏–∫—É?",
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode="Markdown"
            )
            return TIME_OF_YEAR
        else:
            await self.ask_question(query, context)
            return Q_STATE

    # =============================================================
    # –≠–¢–ê–ü 2.5: –£–¢–û–ß–ù–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –ì–û–î–ê
    # =============================================================

    async def handle_time_of_year(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        season = query.data

        context.user_data["time_of_year"] = season
        id_patient = context.user_data.get("id_patient")
        if id_patient:
            await save_test_results(
                id_patient=id_patient,
                answers_json=json.dumps(context.user_data["answers_json"], ensure_ascii=False),
                skin_code=context.user_data["skin_code"],
                time_of_year=season
            )

        await query.edit_message_text(
            f"‚úÖ –°–µ–∑–æ–Ω –≤—ã–±—Ä–∞–Ω: *{season}*\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∞–Ω–∞–ª–∏–∑—É —Ñ–æ—Ç–æ.",
            parse_mode="Markdown"
        )

        buttons = [[InlineKeyboardButton("üì∏ –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ", callback_data="photo_stage")]]
        await query.message.reply_text("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:", reply_markup=InlineKeyboardMarkup(buttons))
        return ConversationHandler.END

    # =============================================================
    # –≠–¢–ê–ü 3: –ê–ù–ê–õ–ò–ó –§–û–¢–û (—Å–∏–º—É–ª—è—Ü–∏—è –¥–µ—Ä–º–∞—Ç–æ—Å–∫–æ–ø–∏–∏)
    # =============================================================

    async def handle_photo_stage(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        id_patient = context.user_data.get("id_patient")
        if not id_patient:
            await query.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç.")
            return

        await query.edit_message_text("üì∏ –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–µ—Ä–º–∞—Ç–æ—Å–∫–æ–ø–∞...")
        await asyncio.sleep(1.5)
        await query.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        await asyncio.sleep(2.0)

        skin_type_dermatoscopy = "OSPW"
        skin_desc = "–ñ–∏—Ä–Ω–∞—è, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è, –ø–∏–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, —Å–∫–ª–æ–Ω–Ω–∞ –∫ –º–æ—Ä—â–∏–Ω–∞–º."
        skin_code = context.user_data.get("skin_code")
        comparison = await save_dermatoscopy_result(id_patient, skin_code, skin_type_dermatoscopy)
        match_percent = comparison["match_percent"]
        final_skin_type = comparison["final_skin_type"]

        pdf_path = r"C:\Users\minik\Desktop\dermatoscopy_andery.pdf"
        if not os.path.exists(pdf_path):
            await query.message.reply_text("‚ùå PDF-—Ñ–∞–π–ª –æ—Ç—á—ë—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            return

        await query.message.reply_text("üìÑ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç...")
        await asyncio.sleep(1.0)

        patient_json = get_patient_json(id_patient)

        caption = (
            f"üìã *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:*\n\n"
            f"üí† –¢–∏–ø –∫–æ–∂–∏ –ø–æ —Ç–µ—Å—Ç—É: *{context.user_data.get('skin_code', '‚Äî')}*\n"
            f"üî¨ –¢–∏–ø –∫–æ–∂–∏ –ø–æ –¥–µ—Ä–º–∞—Ç–æ—Å–∫–æ–ø–∏–∏: *{skin_type_dermatoscopy}*\n  {skin_desc}\n"
            f"üìä –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: *{match_percent}%*\n"
            f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø –∫–æ–∂–∏: *{final_skin_type}*\n"
            f"*–û—Ç–ª–∞–¥–∫–∞ - –ø–æ—Å—ã–ª–∞–µ–º—ã–π –ø—Ä–æ–º—Ç JSON: {patient_json}\n*"
        )

        with open(pdf_path, "rb") as f:
            await query.message.reply_document(document=f, caption=caption, parse_mode="Markdown")

        buttons = [[InlineKeyboardButton("üíÑ –ü–æ–¥–æ–±—Ä–∞—Ç—å —É—Ö–æ–¥", callback_data="care_stage")]]
        await query.message.reply_text("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å —É—Ö–æ–¥:", reply_markup=InlineKeyboardMarkup(buttons))

    # =============================================================
    # –≠–¢–ê–ü 4: –ü–û–î–ë–û–† –£–•–û–î–ê (–∑–∞–≥–ª—É—à–∫–∞ –ø–µ—Ä–µ–¥ LLM)
    # =============================================================

    async def handle_care_stage(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "ü§ñ –ü–æ–¥–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—Ö–æ–¥–∞...\n(—ç—Ç–∞–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LLM)\n"
            "*–≠—Ç–æ –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, –¥–∞–ª—å—à–µ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ*"
        )

    # =============================================================
    # –ó–ê–ü–£–°–ö
    # =============================================================

    def run(self):
        from telegram.ext import ApplicationBuilder

        app = ApplicationBuilder().token(self.token).build()

        conv = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.handle_start_button, pattern="^start_test$")],
            states={
                CONSENT: [CallbackQueryHandler(self.handle_consent, pattern="^(yes|no)$")],
                DEMO: [
                    CallbackQueryHandler(self.handle_demo, pattern="^(–ú|–ñ)$"),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_demo)
                ],
                Q_STATE: [CallbackQueryHandler(self.handle_answer, pattern="^(A|B)$")],
                TIME_OF_YEAR: [CallbackQueryHandler(self.handle_time_of_year)]
            },
            fallbacks=[],
            per_message=False
        )

        app.add_handler(CommandHandler("start", self.start))
        app.add_handler(conv)
        app.add_handler(CallbackQueryHandler(self.handle_photo_stage, pattern="^photo_stage$"))
        app.add_handler(CallbackQueryHandler(self.handle_care_stage, pattern="^care_stage$"))

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
        app.run_polling()
